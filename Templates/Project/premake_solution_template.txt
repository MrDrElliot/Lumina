-- Path to the engine root (set via environment variable)
LuminaEngineDirectory = os.getenv("LUMINA_DIR")
outputdir = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"
include(os.getenv("LUMINA_DIR") .. "/Dependencies.lua")

workspace "$PROJECT_NAME"
    configurations { "Debug", "Release", "Shipping" }
    architecture "x86_64"
    startproject "$PROJECT_NAME"

    language "C++"
    cppdialect "C++20"
    staticruntime "Off"
    conformancemode "On"

    flags { "MultiProcessorCompile" }

    defines {
        "EASTL_USER_DEFINED_ALLOCATOR=1",
        "_CRT_SECURE_NO_WARNINGS",
        "GLM_FORCE_DEPTH_ZERO_TO_ONE",
        "IMGUI_DEFINE_MATH_OPERATORS",
    }

    filter "configurations:Debug"
        optimize "Off"
        symbols "On"

    filter "configurations:Release"
        optimize "On"
        symbols "Default"

    filter "configurations:Shipping"
        optimize "Full"
        symbols "Off"

    filter "system:windows"
        buildoptions {
            "/EHsc",
            "/Zc:preprocessor",
            "/Zc:__cplusplus",
            "/W2",
            "/MP",
        }

    filter {}

-- =============================
-- Game Project
-- =============================


project "$PROJECT_NAME"
    kind "SharedLib"
    language "C++"

    targetdir ("Binaries/%{cfg.buildcfg}")
    objdir ("Intermediates/Obj/%{cfg.buildcfg}")

    files 
    { 
        "Source/**.h",
        "Source/**.cpp",
        "%{wks.location}/Intermediates/Reflection/%{prj.name}/**.h",
		"%{wks.location}/Intermediates/Reflection/%{prj.name}/**.cpp",
    }

    includedirs 
    {
        "Source", -- game source
        path.join(LuminaEngineDirectory, "Lumina/Engine/Source"),
        path.join(LuminaEngineDirectory, "Lumina/Engine/Source/Runtime"),
        path.join(LuminaEngineDirectory, "Lumina/Engine/ThirdParty"),
        path.join(LuminaEngineDirectory, "Intermediates/Reflection/Lumina"),

        reflection_directory();
		includedependencies();
    }

    links 
    {
        path.join(LuminaEngineDirectory, "Binaries", outputdir, "Lumina")
    }

    prebuildcommands
    {
        "\"%{LuminaEngineDirectory}/Binaries/Release-windows-x86_64/Reflector.exe\" \"%{wks.location}%{wks.name}.sln\" && echo Reflection completed."
    }
