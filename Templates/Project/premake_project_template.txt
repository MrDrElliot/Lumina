include(os.getenv("LUMINA_DIR") .. "/Dependencies.lua")

project "$PROJECT_NAME"
	kind "SharedLib"
    dependson { "Lumina" }


    outputdir = "%{cfg.buildcfg}-%{cfg.system}-%{cfg.architecture}"

    targetdir ("%{wks.location}/Intermediates/Build/" .. outputdir .. "/%{prj.name}")
    objdir ("%{wks.location}/Intermediates/Obj/" .. outputdir .. "/%{prj.name}")    

	postbuildcommands
	{
	    '{COPYFILE} "%{cfg.buildtarget.relpath}" "../Binaries/%{prj.name}.dll"',
	    
	    -- '{EXECUTE} "%{LuminaEngineDirectory}/Editor/LuminaEditor.exe" "%{wks.location}/Built/%{prj.name}.dll"'
	}


	removedefines { }

	links
	 {
		"Lumina",
	 }

	files
	{
		"**.h",
		"**.cpp",
	}


	includedirs
	{
		"Source",

	    "%{LuminaEngineDirectory}/Lumina/",
		"%{LuminaEngineDirectory}/Lumina/Engine/",
	    "%{LuminaEngineDirectory}/Lumina/Engine/Source/",
	    "%{LuminaEngineDirectory}/Lumina/Engine/Source/Runtime/",

	    reflection_directory();
		includedependencies();

	}


	filter "system:linux"
		defines { "LE_PLATFORM_LINUX" }

	filter "configurations:Debug"
		symbols "On"
		defines { "LE_DEBUG", "_DEBUG", }

	filter { "system:windows" }
		flags { "NoRuntimeChecks", "NoIncrementalLink" }

	filter "configurations:Release"
		optimize "On"
		defines { "LE_RELEASE", "NDEBUG", }

	filter "configurations:Shipping"
		optimize "On"
		symbols "Off"
		defines { "LE_SHIP" }